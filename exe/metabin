#!/usr/bin/env Rscript
# -*- mode: R;-*-
# =========================================================
# Copyright 2020
#
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================

###################################################################
## Load auxiliary code
dir2script <- normalizePath(dirname(strsplit(split="=",x=grep("--file=",fixed=TRUE,value=TRUE,x=commandArgs(trailingOnly = FALSE)))[[1]][2]))
##
mbk.local.lib.path <- paste0(dir2script,"/../R")
source(paste0(dir2script,"/../R/metabinkit.R"))

default.taxonkit.db.dir <- paste0(dir2script,"/../db/")

library(optparse)
############################################################

option_list = list(
    make_option(c("-i", "--input"), type="character", default=NULL, 
                help="TSV file name", metavar="filename"),
    make_option(c("-o", "--out"), type="character", default=NULL, 
                help="output file prefix ", metavar="filename"),
# TODO: v2    
#    make_option(c("-s", "--subspecies"), type="double", default=99.5, 
#                help="subspecies %id threshold [default= %default]", metavar="double"),
    make_option(c("-S", "--Species"), type="double", default=96.0, 
                help="species %id threshold [default= %default]", metavar="double"),
    make_option(c("-G", "--Genus"), type="double", default=92.0, 
                help="genus %id threshold [default= %default]", metavar="double"),
    make_option(c("-F", "--Family"), type="double", default=90.0, 
                help="family %id threshold [default= %default]", metavar="double"),

    make_option(c("-A", "--AboveF"), type="double", default=89.0, 
                help="above family %id threshold [default= %default]", metavar="double"),

    make_option(c("-D", "--db"), type="character", default=default.taxonkit.db.dir, 
                help="directory containing the taxonomy db (nodes.dmp and names.dmp) [default= %default]", metavar="double"),

    make_option(c("--SpeciesNegFilter"), type="character", default=NULL, 
                help="negative filter (file with one word per line) [default= %default]", metavar="filename"),
    make_option(c("--SpeciesBL"), type="character", default=NULL, 
                help="species blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
    make_option(c("--GenusBL"), type="character", default=NULL, 
                help="genera blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
    make_option(c("--FamilyBL"), type="character", default=NULL, 
                help="families blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
    make_option(c("--FilterFile"), type="character", default=NULL, 
                help="file name with the entries from the input to exclude (on entry per line)  [default= %default]", metavar="filename"),
    make_option(c("--FilterCol"), type="character", default="sseqid", 
                help="Column name to look for the values found the the file provided in the --Filter parameter  [default= %default]", metavar="filename"),

    ## tops,tpoS,topG,topF,topAbs
    make_option(c("--TopSpecies"), type="integer", default=3, 
                help="TODO [default= %default]", metavar="integer"),
    make_option(c("--TopGenus"), type="integer", default=3, 
                help="TODO [default= %default]", metavar="integer"),
    make_option(c("--TopFamily"), type="integer", default=3, 
                help="TODO [default= %default]", metavar="integer"),
    make_option(c("--TopAF"), type="integer", default=3, 
                help="TODO above family? [default= %default]", metavar="integer"),

    make_option(c("-v","--version"), action = "store_true", default = FALSE,
                help = "print version and exit"),
    make_option(c("--no_mbk"), action = "store_true", default = FALSE,
                help = "Do not use mbk: codes in the output file to explain why a sequence was not binned at a given level (NA is used throughout)"),
    ## discard sp
    make_option(c("--sp_discard_sp"), action = "store_true", default = FALSE,
                help = "Discard species with sp. in the name"),
    make_option(c("--sp_discard_mt2w"), action = "store_true", default = FALSE,
                help = "Discard species with more than two words"),
    make_option(c("--sp_discard_num"), action = "store_true", default = FALSE,
                help = "Discard species with numbers"),
    make_option(c("-M","--minimal_cols"), action = "store_true", default = FALSE, help = "Include only the seqid and lineage information in the output table [%default]")
        
    ##make_option(c("-O", "--Order"), type="double", default=75.0, 
    ##            help="Order %id threshold [default= %default]", metavar="double"),
    ##make_option(c("-C", "--Class"), type="double", default=65.0, 
    ##            help="Class %id threshold [default= %default]", metavar="double")

); 
 
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

if ( opt$version ) {
    print.version()
    quit(status=0)
}
if (is.null(opt$input)){
  print_help(opt_parser)
  stop("--input parameter should be provided.\n", call.=FALSE)
}


print.version()
## Blacklisting
##
species.blacklist <- NULL
genus.blacklist <- NULL
family.blacklist <- NULL
species.neg <- NULL

only_taxids <- function(v,file) {

    if (sum(!is.integer(v))>0) {
        perror(fatal=TRUE,"blacklist file ",file," should only contain integers (taxids) in the first column")
    }
}

## load blacklists
if (!is.null(opt$SpeciesBL)) {
    if (!file.exists(opt$SpeciesBL) ) perror(fatal=TRUE,"file ",opt$SpeciesBL, " not found")
    species.blacklist <- as.vector(read.table(file=opt$SpeciesBL,header=F,comment.char = "#",sep="\t",quote="")$V1)
    only_taxids(species.blacklist,f=opt$SpeciesBL)
}
if (!is.null(opt$GenusBL)) {
    if (!file.exists(opt$GenusBL) ) perror(fatal=TRUE,"file ",opt$GenusBL, " not found")
    genus.blacklist <- as.vector(read.table(file=opt$GenusBL,header=F,comment.char = "#",sep="\t",quote="")$V1)
    only_taxids(genus.blacklist,f=opt$GenusBL)
}
if (!is.null(opt$FamilyBL)) {
    if (!file.exists(opt$FamilyBL) ) perror(fatal=TRUE,"file ",opt$FamilyBL, " not found")
    family.blacklist <- as.vector(read.table(file=opt$FamilyBL,header=F,comment.char = "#",sep="\t",quote="")$V1)
    only_taxids(family.blacklist,f=opt$FamilyBL)
}


if (!is.null(opt$SpeciesNegFilter)) {
    if (!file.exists(opt$SpeciesNegFilter) ) perror(fatal=TRUE,"file ",opt$SpeciesNegFilter, " not found")
    species.neg <- as.vector(read.table(file=opt$SpeciesNegFilter,header=F,comment.char = "#",sep="\t",quote="")$V1)
}

if(is.null(opt$FilterCol) && !is.null(opt$FilterFile)) {
    stop("--FilterFile needs to be provided with --FilterCol")
}

##

filter.list <- NULL
if (!is.null(opt$FilterFile)) {
    print(file.exists(opt$FilterFile))
    if (!file.exists(opt$FilterFile) ) perror(fatal=TRUE,"file ",opt$FilterFile, " not found!!!")
    filter.list <- as.vector(read.table(file=opt$FilterFile,header=F,comment.char = "#",sep="\t",quote=""))
    if (length(filter.list)==0) { filter.list <- NULL }
}
pinfo("Starting Binning")
t1<-Sys.time()

binned <- metabin(ifile=opt$input,
                  taxDir=opt$db,
                  spident=opt$Species,
                  gpident=opt$Genus,
                  fpident=opt$Family,
                  abspident=opt$AboveF,
                  topS=opt$TopSpecies,
                  topF=opt$TopFamily,
                  topG=opt$TopGenus,
                  topAbs=opt$TopAF,                  
                  species.blacklist=species.blacklist,
                  genus.blacklist=genus.blacklist,
                  family.blacklist=family.blacklist,
                  filter.col=opt$FilterCol,
                  filter=filter.list,
                  species.neg=species.neg,
                  no_mbk=opt$no_mbk,
                  sp.consider.mt2w=!opt$sp_discard_mt2w,
                  sp.consider.numbers=!opt$sp_discard_num,
                  sp.consider.sp=!opt$sp_discard_sp)
            
##              disabledTaxaFiles = disabledTaxaFiles)
if (!is.null(binned)) {
    ofile <- paste0(opt$out,".tsv")
    oifile <- paste0(opt$out,".info.tsv")
    if (opt$minimal_cols) {
        binned$table <- binned$table[,c("qseqid","K","P","C","O","F","G","S"),drop=FALSE]
    }
    write.table(x = binned$table,file = ofile,sep="\t",quote = FALSE,row.names = FALSE)
    pinfo("binned table written to ",ofile)
    ## Save stats
    df <- t(data.frame(binned$stats,check.names=FALSE))
    write.table(x=df,file=oifile,sep="\t",quote=FALSE,col.names=FALSE,row.names=TRUE)
    pinfo("information stats written to ",oifile)
}
t2<-Sys.time()
t3<-round(difftime(t2,t1,units = "mins"),digits = 2)
vfile <- paste0(opt$out,".versions.txt")
pinfo("Versions info written to ",vfile)
pinfo("Binning complete in ", t3, " min")
sink(file=vfile)
sessionInfo()
q(status=0)
