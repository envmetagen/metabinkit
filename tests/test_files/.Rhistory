#binned[,seq(idx,length(colnames(binned)))] <- NA
}
get.binned0 <- function(tab,lca,taxlevel,taxcols=c("K","P","C","O","F","G","S")) {
get.binned.ids <- function(lca,taxlevel) {
return(lca[lca[,taxlevel]!="unknown","qseqid"])
}
binned.ids <- c()
##if (nrow(lca)>0)
binned.ids <- unique(unlist(lapply(taxlevel,FUN=get.binned.ids,lca=lca)))
binned <- tab[tab$qseqid%in%binned.ids,c("qseqid","pident","min_pident"),drop=FALSE]
binned <- binned[!duplicated(binned$qseqid),,drop=FALSE]
binned <- cbind(binned,lca[match(binned$qseqid,lca$qseqid),taxcols,drop=FALSE])
idx <- max(which(colnames(binned) %in% taxlevel))+1
if ( idx < length(colnames(binned)) && nrow(binned)>0) {
## all levels below the one where the binning has occured are set to NA
## do nothing when taxlevel=S
binned[,seq(idx,length(colnames(binned)))] <- NA
}
return(binned)
}
pinfo <- function(...,verbose=TRUE) {
if (verbose) message(paste0("[info] ",...,""))
}
perror <- function(...,fatal=FALSE) {
message(paste0("[ERROR] ",...,""))
if (fatal) quit(status=1)
}
get.lowest.common.ancestor <- function(tab) {
colnames <- c("qseqid","K","P","C","O","F","G","S")
if(nrow(tab)==0) {
lcasp<-data.frame(matrix(nrow=0,ncol = 8))
colnames(lcasp)<-colnames
return(lcasp)
}
tab$path<-paste(tab$K,tab$P,tab$C,tab$O,tab$F,tab$G,tab$S,sep = ";")
lcasp = aggregate(tab$path, by=list(tab$qseqid),function(x) lca(x,sep=";"))
colnames(lcasp)<-c("qseqid","binpath")
lcasp<-add.unknown.lca(lcasp)
mat<-do.call(rbind,stringr::str_split(lcasp$binpath,";"))
lcasp<-as.data.frame(cbind(lcasp$qseqid,mat[,1],mat[,2],mat[,3],mat[,4],mat[,5],mat[,6],mat[,7]))
colnames(lcasp)<-colnames
return(lcasp)
}
apply.blacklists <- function(tab,blacklists,level="S",mark.bl="mbk:bl") {
bl <- NULL
if (is.null(blacklists)) return(tab)
if (level=="S") {
bl <- unique(c(blacklists$genus.level,
blacklists$species.level,
blacklists$family.level))
} else {
if (level=="G") {
bl=unique(c(blacklists$genus.level,blacklists$family.level))
} else {
## level==F
bl=blacklists$family.level
}
}
if (length(bl)==0) return(tab)
tab[tab$taxids %in% bl,level] <- mark.bl
return(tab)
}
get.top <- function(tab,topN) {
if (nrow(tab)==0) {
d<-data.frame(matrix(nrow=0,ncol=1))
colnames(d) <- c("min_pident")
tab <- cbind(tab,d)
return(tab)
}
## top hit for each qseqid
setDT(tab)
tab.a <- tab[tab[, .I[pident==max(pident)], by=qseqid]$V1]
## discard ties
tab.a <- tab.a[!duplicated(tab.a$qseqid),,drop=FALSE]
tab.a <- as.data.frame(tab.a)
tab <- as.data.frame(tab)
rownames(tab.a) <- tab.a$qseqid
tab.a$minp <- tab.a$pident-topN
tab.a$minp[tab.a$minp<0] <- 0
## add minp
tab$min_pident <- tab.a[tab$qseqid,"minp"]
tab<-tab[tab$pident>=tab$min_pident,,drop=FALSE]
tab <- tab[!is.na(tab$qseqid),,drop=FALSE]
return(tab)
}
##
add.lineage.df<-function(dframe,taxDir,taxCol="taxids") {
if(!taxCol %in% colnames(dframe)) {stop(paste0("No column called ",taxCol))}
if ( nrow(dframe) == 0 ) {
pinfo("Skipping taxonomic rerieval - no data")
new.cols <- c("old_taxids","K","P","C","O","F","G","S")
new.df <- data.frame(matrix(nrow=0,ncol=ncol(dframe)+length(new.cols)))
colnames(new.df) <- c(colnames(dframe),new.cols)
return(new.df)
}
##write taxids to file
taxids_fileIn <- tempfile(pattern = "taxids_", tmpdir = tempdir(), fileext = ".txt")
taxids_fileOut <- tempfile(pattern = "taxids_", tmpdir = tempdir(), fileext = ".out.txt")
write.table(unique(dframe[,taxCol]),file = taxids_fileIn,row.names = FALSE,col.names = FALSE,quote = FALSE)
##get taxonomy from taxids and format in 7 levels
cmd <- paste0("cat ",taxids_fileIn, " | taxonkit lineage --data-dir ", taxDir, " | taxonkit reformat --data-dir ",taxDir," | cut -f 1,3 > ",taxids_fileOut)
system(cmd)
lineage<-as.data.frame(data.table::fread(file = taxids_fileOut,sep = "\t",header=FALSE))
colnames(lineage)<-gsub("V1","taxids",colnames(lineage))
colnames(lineage)<-gsub("V2","path",colnames(lineage))
##merge with df
##message("replacing taxids with updated taxids. Saving old taxids in old_taxids.")
dframe<-merge(dframe,lineage[,c("taxids","path")],by.x = taxCol,by.y = "taxids")
dframe$old_taxids<-dframe[,taxCol]
##dframe$taxids<-dframe$new_taxids
dframe$new_taxids <- NULL
dframe<-cbind(dframe,do.call(rbind, stringr::str_split(dframe$path,";")))
colnames(dframe)[(length(dframe)-6):length(dframe)]<-c("K","P","C","O","F","G","S")
dframe$K<-as.character(dframe$K)
dframe$P<-as.character(dframe$P)
dframe$C<-as.character(dframe$C)
dframe$O<-as.character(dframe$O)
dframe$F<-as.character(dframe$F)
dframe$G<-as.character(dframe$G)
dframe$S<-as.character(dframe$S)
##change empty cells to "unknown"
##dframe[,(length(dframe)-6):length(dframe)][dframe[,(length(dframe)-6):length(dframe)]==""]<- "unknown"
## tnf: taxid not found
dframe[,(length(dframe)-6):length(dframe)][dframe[,(length(dframe)-6):length(dframe)]==""]<- "mbk:tnf"
dframe$path <- NULL
unlink(taxids_fileIn)
unlink(taxids_fileOut)
return(dframe)
}
get.taxids.children <-function(taxids,taxonomy_data_dir=NULL){
if(is.null(taxids)) return(NULL);
staxids<-as.integer(as.character(unique(taxids)))
## temp.file - use default temporary directory
taxids_fileIn <- tempfile(pattern = "taxids_", tmpdir = tempdir(), fileext = ".txt")
taxids_fileOut <- tempfile(pattern = "taxids_", tmpdir = tempdir(), fileext = ".out.txt")
write.table(staxids,file = taxids_fileIn,row.names = F,col.names = F,quote = F)
###############
## get children
## usw a wrapper to be able to deal with big lists of taxids
cmd <- paste0("taxonkit_children.sh ",taxids_fileIn," ",taxids_fileOut)
if (!is.null(taxonomy_data_dir)) {
cmd <- paste0(cmd," ",taxonomy_data_dir)
}
system(cmd)
##
children<-data.table::fread(file = taxids_fileOut,header=FALSE,sep = "\t",quote="",data.table = F)
children<-children[!is.na(children$V1),]
unlink(taxids_fileIn)
unlink(taxids_fileOut)
return(children)
}
add.unknown.lca<-function(lca.out){
lca.out$binpath[is.na(lca.out$binpath)]<-"mbk:nb-lca;mbk:nb-lca;mbk:nb-lca;mbk:nb-lca;mbk:nb-lca;mbk:nb-lca;mbk:nb-lca"
lca.out$binpath[stringr::str_count(lca.out$binpath,";")==5]<-paste0(lca.out$binpath[stringr::str_count(lca.out$binpath,";")==5],";mbk:nb-lca")
lca.out$binpath[stringr::str_count(lca.out$binpath,";")==4]<-paste0(lca.out$binpath[stringr::str_count(lca.out$binpath,";")==4],";mbk:nb-lca;mbk:nb-lca")
lca.out$binpath[stringr::str_count(lca.out$binpath,";")==3]<-paste0(lca.out$binpath[stringr::str_count(lca.out$binpath,";")==3],";mbk:nb-lca;mbk:nb-lca;mbk:nb-lca")
lca.out$binpath[stringr::str_count(lca.out$binpath,";")==2]<-paste0(lca.out$binpath[stringr::str_count(lca.out$binpath,";")==2],";mbk:nb-lca;mbk:nb-lca;mbk:nb-lca;mbk:nb-lca")
lca.out$binpath[stringr::str_count(lca.out$binpath,";")==1]<-paste0(lca.out$binpath[stringr::str_count(lca.out$binpath,";")==1],";mbk:nb-lca;mbk:nb-lca;mbk:nb-lca;mbk:nb-lca;mbk:nb-lca")
lca.out$binpath[stringr::str_count(lca.out$binpath,";")==0]<-paste0(lca.out$binpath[stringr::str_count(lca.out$binpath,";")==0],";mbk:nb-lca;mbk:nb-lca;mbk:nb-lca;mbk:nb-lca;mbk:nb-lca;mbk:nb-lca")
return(lca.out)
}
?commandArgs
setwd("/home/tutorial/TOOLS/metabinkit/tests/test_files/")
a<-data.table::fread("in0.blast.short.tsv", data.table=F)
b<-data.table::fread("out0.short.bins.tsv", data.table=F)
a<-data.table::fread("in0.blast.tsv", data.table=F)
b<-split(a,f="qseqid")
b<-split(a,f=qseqid)
length(unique(a$qseqid))
b<-split(a,f=a$qseqid)
i=1
paste0("query",i)
for(i in 1:length(unique(a$seqid)))
for(i in 1:length(unique(a$seqid))){
query<-paste0("query",i)
b[[i]]$seqid<-query
}
for(i in 1:length(b)){
query<-paste0("query",i)
b[[i]]$seqid<-query
}
b[[i]]
b<-split(a,f=a$qseqid)
for(i in 1:length(b)){
query<-paste0("query",i)
b[[i]]$qseqid<-query
}
b[[i]]
b2<-unlist(b)
b2<-do.call(rbind,b)
View(b2)
write.table(b2,"in0.blast.short.tsv",row.names = F,quote=F,sep="\t")
a<-data.table::fread("in1.blast.tsv", data.table=F)
b<-split(a,f=a$qseqid)
for(i in 1:length(b)){
query<-paste0("query",i)
b[[i]]$qseqid<-query
}
b2<-do.call(rbind,b)
write.table(b2,"in1.blast.short.tsv",row.names = F,quote=F,sep="\t")
library(optparse)
option_list = list(
make_option(c("-i", "--input"), type="character", default=NULL,
help="TSV file name", metavar="filename"),
make_option(c("-o", "--out"), type="character", default=NULL,
help="output file prefix ", metavar="filename")
,make_option(c("-S", "--Species"), type="double", default=99.0,
help="species %id threshold [default= %default]", metavar="double"),
make_option(c("-G", "--Genus"), type="double", default=97.0,
help="genus %id threshold [default= %default]", metavar="double"),
make_option(c("-F", "--Family"), type="double", default=95.0,
help="family %id threshold [default= %default]", metavar="double"),
make_option(c("-A", "--AboveF"), type="double", default=90.0,
help="above family %id threshold [default= %default]", metavar="double"),
make_option(c("-D", "--db"), type="character", default=default.taxonkit.db.dir,
help="directory containing the taxonomy db (nodes.dmp and names.dmp) [default= %default]", metavar="double"),
make_option(c("--SpeciesNegFilter"), type="character", default=NULL,
help="negative filter (file with one word per line) [default= %default]", metavar="filename"),
make_option(c("--SpeciesBL"), type="character", default=NULL,
help="species blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
make_option(c("--GenusBL"), type="character", default=NULL,
help="genera blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
make_option(c("--FamilyBL"), type="character", default=NULL,
help="families blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
make_option(c("--FilterFile"), type="character", default=NULL,
help="file name with the entries from the input to exclude (on entry per line)  [default= %default]", metavar="filename"),
make_option(c("--FilterCol"), type="character", default="sseqid",
help="Column name to look for the values found the the file provided in the --Filter parameter  [default= %default]", metavar="filename"),
## tops,tpoS,topG,topF,topAbs
make_option(c("--TopSpecies"), type="integer", default=100,
help="TODO [default= %default]", metavar="integer"),
make_option(c("--TopGenus"), type="integer", default=100,
help="TODO [default= %default]", metavar="integer"),
make_option(c("--TopFamily"), type="integer", default=100,
help="TODO [default= %default]", metavar="integer"),
make_option(c("--TopAF"), type="integer", default=100,
help="TODO above family? [default= %default]", metavar="integer"),
make_option(c("-v","--version"), action = "store_true", default = FALSE,
help = "print version and exit"),
make_option(c("--no_mbk"), action = "store_true", default = FALSE,
help = "Do not use mbk: codes in the output file to explain why a sequence was not binned at a given level (NA is used throughout)"),
## discard sp
make_option(c("--sp_discard_sp"), action = "store_true", default = FALSE,
help = "Discard species with sp. in the name"),
make_option(c("--sp_discard_mt2w"), action = "store_true", default = FALSE,
help = "Discard species with more than two words"),
make_option(c("--sp_discard_num"), action = "store_true", default = FALSE,
help = "Discard species with numbers"),
make_option(c("-M","--minimal_cols"), action = "store_true", default = FALSE, help = "Include only the seqid and lineage information in the output table [%default]")
);
dir2script <- normalizePath(dirname(strsplit(split="=",x=grep("--file=",fixed=TRUE,value=TRUE,x=commandArgs(trailingOnly = FALSE)))[[1]][2]))
commandArgs()
commandArgs
commandArgs()
dir2script<-"/home/tutorial/TOOLS/metabinkit.install/exe/metabin"
mbk.local.lib.path <- paste0(dir2script,"/../R")
source(paste0(dir2script,"/../R/metabinkit.R"))
dir2script<-"/home/tutorial/TOOLS/metabinkit.install/exe/"
source(paste0(dir2script,"/../R/metabinkit.R"))
dir2script<-"/home/tutorial/TOOLS/metabinkit.install/"
source(paste0(dir2script,"/../R/metabinkit.R"))
dir2script<-"/home/tutorial/TOOLS/metabinkit.install"
source(paste0(dir2script,"/../R/metabinkit.R"))
dir2script<-"/home/tutorial/TOOLS/metabinkit"
source(paste0(dir2script,"/../R/metabinkit.R"))
dir2script<-"/home/tutorial/TOOLS/metabinkit.install"
source(paste0(dir2script,"/../R/metabinkit.R"))
dir2script<-"/home/tutorial/TOOLS/metabinkit.install/R"
source(paste0(dir2script,"/../R/metabinkit.R"))
dir2script<-"/home/tutorial/TOOLS/metabinkit/R"
source(paste0(dir2script,"/../R/metabinkit.R"))
dir2script<-"/home/tutorial/TOOLS/metabinkit/exe"
source(paste0(dir2script,"/../R/metabinkit.R"))
dir2script<-"/home/tutorial/TOOLS/metabinkit.install/exe"
source(paste0(dir2script,"/../R/metabinkit.R"))
paste0(dir2script,"/../R/metabinkit.R")
mbk.local.lib.path <- paste0(dir2script,"/../R")
source(paste0(dir2script,"/../R/metabinkit.R"))
default.taxonkit.db.dir <- paste0(dir2script,"/../db/")
library(optparse)
option_list = list(
make_option(c("-i", "--input"), type="character", default=NULL,
help="TSV file name", metavar="filename"),
make_option(c("-o", "--out"), type="character", default=NULL,
help="output file prefix ", metavar="filename"),
# TODO: v2
#    make_option(c("-s", "--subspecies"), type="double", default=99.5,
#                help="subspecies %id threshold [default= %default]", metavar="double"),
make_option(c("-S", "--Species"), type="double", default=99.0,
help="species %id threshold [default= %default]", metavar="double"),
make_option(c("-G", "--Genus"), type="double", default=97.0,
help="genus %id threshold [default= %default]", metavar="double"),
make_option(c("-F", "--Family"), type="double", default=95.0,
help="family %id threshold [default= %default]", metavar="double"),
make_option(c("-A", "--AboveF"), type="double", default=90.0,
help="above family %id threshold [default= %default]", metavar="double"),
make_option(c("-D", "--db"), type="character", default=default.taxonkit.db.dir,
help="directory containing the taxonomy db (nodes.dmp and names.dmp) [default= %default]", metavar="double"),
make_option(c("--SpeciesNegFilter"), type="character", default=NULL,
help="negative filter (file with one word per line) [default= %default]", metavar="filename"),
make_option(c("--SpeciesBL"), type="character", default=NULL,
help="species blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
make_option(c("--GenusBL"), type="character", default=NULL,
help="genera blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
make_option(c("--FamilyBL"), type="character", default=NULL,
help="families blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
make_option(c("--FilterFile"), type="character", default=NULL,
help="file name with the entries from the input to exclude (on entry per line)  [default= %default]", metavar="filename"),
make_option(c("--FilterCol"), type="character", default="sseqid",
help="Column name to look for the values found the the file provided in the --Filter parameter  [default= %default]", metavar="filename"),
## tops,tpoS,topG,topF,topAbs
make_option(c("--TopSpecies"), type="integer", default=100,
help="TODO [default= %default]", metavar="integer"),
make_option(c("--TopGenus"), type="integer", default=100,
help="TODO [default= %default]", metavar="integer"),
make_option(c("--TopFamily"), type="integer", default=100,
help="TODO [default= %default]", metavar="integer"),
make_option(c("--TopAF"), type="integer", default=100,
help="TODO above family? [default= %default]", metavar="integer"),
make_option(c("-v","--version"), action = "store_true", default = FALSE,
help = "print version and exit"),
make_option(c("--no_mbk"), action = "store_true", default = FALSE,
help = "Do not use mbk: codes in the output file to explain why a sequence was not binned at a given level (NA is used throughout)"),
## discard sp
make_option(c("--sp_discard_sp"), action = "store_true", default = FALSE,
help = "Discard species with sp. in the name"),
make_option(c("--sp_discard_mt2w"), action = "store_true", default = FALSE,
help = "Discard species with more than two words"),
make_option(c("--sp_discard_num"), action = "store_true", default = FALSE,
help = "Discard species with numbers"),
make_option(c("-M","--minimal_cols"), action = "store_true", default = FALSE, help = "Include only the seqid and lineage information in the output table [%default]")
##make_option(c("-O", "--Order"), type="double", default=75.0,
##            help="Order %id threshold [default= %default]", metavar="double"),
##make_option(c("-C", "--Class"), type="double", default=65.0,
##            help="Class %id threshold [default= %default]", metavar="double")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
if ( opt$version ) {
print.version()
quit(status=0)
}
if (is.null(opt$input)){
print_help(opt_parser)
stop("--input parameter should be provided.\n", call.=FALSE)
}
opt
dir2script
names(opt)
parse_args(opt_parser)
#change opt to desired settings
# names(opt)
# [1] "Species"         "Genus"           "Family"          "AboveF"          "db"              "FilterCol"       "TopSpecies"
# [8] "TopGenus"        "TopFamily"       "TopAF"           "version"         "no_mbk"          "sp_discard_sp"   "sp_discard_mt2w"
# [15] "sp_discard_num"  "minimal_cols"    "help"
opt$input<-"/home/tutorial/TOOLS/metabinkit/tests/test_files/in0.blast.short.tsv"
opt$out<-"/home/tutorial/TOOLS/metabinkit/tests/test_files/out0.blast.short.tsv"
if (is.null(opt$input)){
print_help(opt_parser)
stop("--input parameter should be provided.\n", call.=FALSE)
}
print.version()
## Blacklisting
##
species.blacklist <- NULL
genus.blacklist <- NULL
family.blacklist <- NULL
species.neg <- NULL
only_taxids <- function(v,file) {
if (sum(!is.integer(v))>0) {
perror(fatal=TRUE,"blacklist file ",file," should only contain integers (taxids) in the first column")
}
}
## load blacklists
if (!is.null(opt$SpeciesBL)) {
if (!file.exists(opt$SpeciesBL) ) perror(fatal=TRUE,"file ",opt$SpeciesBL, " not found")
species.blacklist <- as.vector(read.table(file=opt$SpeciesBL,header=F,comment.char = "#",sep="\t",quote="")$V1)
only_taxids(species.blacklist,f=opt$SpeciesBL)
}
if (!is.null(opt$GenusBL)) {
if (!file.exists(opt$GenusBL) ) perror(fatal=TRUE,"file ",opt$GenusBL, " not found")
genus.blacklist <- as.vector(read.table(file=opt$GenusBL,header=F,comment.char = "#",sep="\t",quote="")$V1)
only_taxids(genus.blacklist,f=opt$GenusBL)
}
if (!is.null(opt$FamilyBL)) {
if (!file.exists(opt$FamilyBL) ) perror(fatal=TRUE,"file ",opt$FamilyBL, " not found")
family.blacklist <- as.vector(read.table(file=opt$FamilyBL,header=F,comment.char = "#",sep="\t",quote="")$V1)
only_taxids(family.blacklist,f=opt$FamilyBL)
}
if (!is.null(opt$SpeciesNegFilter)) {
if (!file.exists(opt$SpeciesNegFilter) ) perror(fatal=TRUE,"file ",opt$SpeciesNegFilter, " not found")
species.neg <- as.vector(read.table(file=opt$SpeciesNegFilter,header=F,comment.char = "#",sep="\t",quote="")$V1)
}
if(is.null(opt$FilterCol) && !is.null(opt$FilterFile)) {
stop("--FilterFile needs to be provided with --FilterCol")
}
##
filter.list <- NULL
if (!is.null(opt$FilterFile)) {
print(file.exists(opt$FilterFile))
if (!file.exists(opt$FilterFile) ) perror(fatal=TRUE,"file ",opt$FilterFile, " not found!!!")
filter.list <- as.vector(read.table(file=opt$FilterFile,header=F,comment.char = "#",sep="\t",quote=""))
if (length(filter.list)==0) { filter.list <- NULL }
}
pinfo("Starting Binning")
t1<-Sys.time()
binned <- metabin(ifile=opt$input,
taxDir=opt$db,
spident=opt$Species,
gpident=opt$Genus,
fpident=opt$Family,
abspident=opt$AboveF,
topS=opt$TopSpecies,
topF=opt$TopFamily,
topG=opt$TopGenus,
topAbs=opt$TopAF,
species.blacklist=species.blacklist,
genus.blacklist=genus.blacklist,
family.blacklist=family.blacklist,
filter.col=opt$FilterCol,
filter=filter.list,
species.neg=species.neg,
no_mbk=opt$no_mbk,
sp.consider.mt2w=!opt$sp_discard_mt2w,
sp.consider.numbers=!opt$sp_discard_num,
sp.consider.sp=!opt$sp_discard_sp)
View(binned)
binned$table
opt$SpeciesBL<-"/home/tutorial/TOOLS/metabinkit/tests/test_files/testspecies2exclude.txt
opt$GenusBL
opt$FamilyBL
opt$SpeciesNegFilter
opt$FilterCol
#then run the rest
opt$SpeciesBL<-"/home/tutorial/TOOLS/metabinkit/tests/test_files/testspecies2exclude.txt"
#change opt to desired settings
# names(opt)
# [1] "Species"         "Genus"           "Family"          "AboveF"          "db"              "FilterCol"       "TopSpecies"
# [8] "TopGenus"        "TopFamily"       "TopAF"           "version"         "no_mbk"          "sp_discard_sp"   "sp_discard_mt2w"
# [15] "sp_discard_num"  "minimal_cols"    "help"
opt$input<-"/home/tutorial/TOOLS/metabinkit/tests/test_files/in1.blast.short.tsv"
opt$out<-"/home/tutorial/TOOLS/metabinkit/tests/test_files/out1.blast.short.tsv"
opt$SpeciesBL<-"/home/tutorial/TOOLS/metabinkit/tests/test_files/testspecies2exclude.txt"
binned <- metabin(ifile=opt$input,
taxDir=opt$db,
spident=opt$Species,
gpident=opt$Genus,
fpident=opt$Family,
abspident=opt$AboveF,
topS=opt$TopSpecies,
topF=opt$TopFamily,
topG=opt$TopGenus,
topAbs=opt$TopAF,
species.blacklist=species.blacklist,
genus.blacklist=genus.blacklist,
family.blacklist=family.blacklist,
filter.col=opt$FilterCol,
filter=filter.list,
species.neg=species.neg,
no_mbk=opt$no_mbk,
sp.consider.mt2w=!opt$sp_discard_mt2w,
sp.consider.numbers=!opt$sp_discard_num,
sp.consider.sp=!opt$sp_discard_sp)
if (!is.null(opt$SpeciesNegFilter)) {
if (!file.exists(opt$SpeciesNegFilter) ) perror(fatal=TRUE,"file ",opt$SpeciesNegFilter, " not found")
species.neg <- as.vector(read.table(file=opt$SpeciesNegFilter,header=F,comment.char = "#",sep="\t",quote="")$V1)
}
binned <- metabin(ifile=opt$input,
taxDir=opt$db,
spident=opt$Species,
gpident=opt$Genus,
fpident=opt$Family,
abspident=opt$AboveF,
topS=opt$TopSpecies,
topF=opt$TopFamily,
topG=opt$TopGenus,
topAbs=opt$TopAF,
species.blacklist=species.blacklist,
genus.blacklist=genus.blacklist,
family.blacklist=family.blacklist,
filter.col=opt$FilterCol,
filter=filter.list,
species.neg=species.neg,
no_mbk=opt$no_mbk,
sp.consider.mt2w=!opt$sp_discard_mt2w,
sp.consider.numbers=!opt$sp_discard_num,
sp.consider.sp=!opt$sp_discard_sp)
if (!is.null(opt$SpeciesBL)) {
if (!file.exists(opt$SpeciesBL) ) perror(fatal=TRUE,"file ",opt$SpeciesBL, " not found")
species.blacklist <- as.vector(read.table(file=opt$SpeciesBL,header=F,comment.char = "#",sep="\t",quote="")$V1)
only_taxids(species.blacklist,f=opt$SpeciesBL)
}
binned <- metabin(ifile=opt$input,
taxDir=opt$db,
spident=opt$Species,
gpident=opt$Genus,
fpident=opt$Family,
abspident=opt$AboveF,
topS=opt$TopSpecies,
topF=opt$TopFamily,
topG=opt$TopGenus,
topAbs=opt$TopAF,
species.blacklist=species.blacklist,
genus.blacklist=genus.blacklist,
family.blacklist=family.blacklist,
filter.col=opt$FilterCol,
filter=filter.list,
species.neg=species.neg,
no_mbk=opt$no_mbk,
sp.consider.mt2w=!opt$sp_discard_mt2w,
sp.consider.numbers=!opt$sp_discard_num,
sp.consider.sp=!opt$sp_discard_sp)
